const { convertRgbaToHsla } = require('./util.js');

/**
 * @param {array} colorCodes - array of rgba color codes
 * @param {number} colorGroupNumber - number of groups to divide hsla codes
 * @returns {object} - object of grouped hsla color codes
 */
function groupColors(colorCodes, colorGroupNumber) {
  const groupedCodes = { 0: {} };
  let bottomHsla = 0;
  const step = +360/colorGroupNumber;
  let topHsla = step;
  let index = 0;

  const hslColorCodes = colorCodes.map(colorCode => {
    return convertRgbaToHsla(+colorCode.red, +colorCode.green, +colorCode.blue, +colorCode.alpha);
  });

  while (index < colorGroupNumber) {
    groupedCodes[index] = {};
    hslColorCodes.forEach(colorCode => {
      if (bottomHsla <= colorCode.hue && colorCode.hue < topHsla) {
        const hslaString = `hsla(${colorCode.hue}, ${colorCode.saturation}%, ${colorCode.lightness}%, ${colorCode.alpha})`;
  
        if (groupedCodes[index][hslaString]) {
          groupedCodes[index][hslaString] += 1;
        } else {
          groupedCodes[index][hslaString] = 1;
        }  
      }
    });
    index += 1;
    bottomHsla += step;
    topHsla += step;
  }
  return groupedCodes;
}

/**
 * @param {object} colorCodes - HSLA color codes
 * @param {number} sliceNumber - index to start slicing sorted group of colors
 * @returns {array} dominantColorCodes - dominant HSLA color codes, colors are sorted in the ascending order
 */
function findDominantColors(colorCodes, sliceNumber) {
  const dominantColors = Object.entries(colorCodes)
    // sort colors inside hue groups by number of occurances
    .map(item => Object.entries(item[1]).sort((a, b) => a[1] - b[1]))
    // slice the dominant color code
    .map(item => {
      const sliceIndex = sliceNumber == 1 ? item.length - 1 : 0;
      return item.slice(sliceIndex, item.length);
    })
    // arrange colors in one group
    .reduce((acc, currentValue) => {
      if (currentValue.length > 0) {
        acc = [...acc, ...currentValue];
      }
      return acc;
    }, [])
    // sort colors in the group by the amount of occurances
    .sort((a, b) => a[1] - b[1])
    // remove number of occurances
    .reduce((acc, currentValue) => {
      acc.push(currentValue[0]);
      return acc;
    }, []);
  return dominantColors;
}

module.exports = {
  groupColors,
  findDominantColors
};
