/**
 * @param {number} red - red value
 * @param {number} green - green value
 * @param {number} blue - blue value
 * @param {number} alpha - alpha value
 * @returns {object} - hsl color codes
 */
function convertRgbaToHsla(red, green, blue, alpha) {
  red /= 255;
  green /= 255;
  blue /= 255;

  const max = Math.max(red, green, blue);
  const min = Math.min(red, green, blue);
  const delta = max - min;
  let hue, saturation, lightness;

  if (delta === 0) {
    hue = 0;
  } else {
    switch (max) {
      case red:
        hue = ((green - blue) / delta) % 6;
        break;
      case green:
        hue = (blue - red) / delta + 2;
        break;
      case blue:
        hue = (red - green) / delta + 4;
        break;
    }  
  }

  hue = hue < 0 ? Math.round(hue * 60) + 360 : Math.round(hue * 60);
  lightness = (max + min)/2;
  saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * lightness - 1));

  saturation = +(saturation * 100).toFixed(0);
  lightness = +(lightness * 100).toFixed(0);

  return { hue, saturation, lightness, alpha };
}

exports.convertRgbaToHsla = convertRgbaToHsla;
