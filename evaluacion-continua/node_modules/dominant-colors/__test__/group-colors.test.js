const { groupColors, findDominantColors } = require('../src/js/group-colors.js');

// integration test
describe('groupColors', () => {
  const inputColors = [
    { red: 0, green: 0, blue: 0, alpha: 1 },
    { red: 255, green: 255, blue: 255, alpha: 1 },
    { red: 255, green: 0, blue: 255, alpha: 1 },
    { red: 0, green: 255, blue: 255, alpha: 1 },
    { red: 255, green: 255, blue: 0, alpha: 1 },
    { red: 116, green: 178, blue: 195, alpha: 1 }
  ];

  test('groups color codes to the correct hash tables with n = 6', () => {
    const actualResult = groupColors(inputColors, 6);
    expect(actualResult).toEqual({
      0: {
        'hsla(0, 0%, 0%, 1)': 1,
        'hsla(0, 0%, 100%, 1)': 1
      },
      1: {
        'hsla(60, 100%, 50%, 1)': 1
      },
      2: {},
      3: {
        'hsla(180, 100%, 50%, 1)': 1,
        'hsla(193, 40%, 61%, 1)': 1
      },
      4: {},
      5: {
        'hsla(300, 100%, 50%, 1)': 1
      }
    });
  });

  test('groups color codes to the correct hash tables with n = 12', () => {
    const actualResult = groupColors(inputColors, 12);
    const expectedResult = {
      '0': { 'hsla(0, 0%, 0%, 1)': 1, 'hsla(0, 0%, 100%, 1)': 1 },
      '1': {},
      '2': { 'hsla(60, 100%, 50%, 1)': 1 },
      '3': {},
      '4': {},
      '5': {},
      '6': { 'hsla(180, 100%, 50%, 1)': 1, 'hsla(193, 40%, 61%, 1)': 1 },
      '7': {},
      '8': {},
      '9': {},
      '10': { 'hsla(300, 100%, 50%, 1)': 1 },
      '11': {}
    };
    expect(actualResult).toEqual(expectedResult);
  });
});

describe('findDominantColors', () => {
  const inputColors = {
    hsl0To60: {
      'hsla(9, 100%, 64%, 1)': 35,
      'hsla(0, 0%, 100%, 1)': 10,
      'hsla(0, 0%, 0%, 1)': 8,
      'hsla(39, 77%, 83%, 1)': 2,
      'hsla(0, 0%, 0%, 0)': 1
    },
    hsl60To120: {},
    hsl120To180: {},
    hsl180To240: { 'hsla(180, 100%, 97%, 1)': 84, 'hsla(186, 89%, 29%, 1)': 2 },
    hsl240To300: {},
    hsl300To360: { 'hsla(351, 100%, 86%, 1)': 2 }
  };

  test('returns dominant hsla color codes with sliceIndex = 1', () => {
    const result = findDominantColors(inputColors, 1);
    expect(result).toHaveLength(3);
    expect(result).toContain('hsla(9, 100%, 64%, 1)');
    expect(result).toContain('hsla(180, 100%, 97%, 1)');
    expect(result).toContain('hsla(351, 100%, 86%, 1)');
  });

  test('returns dominant hsla color codes with sliceIndex = 0', () => {
    const result = findDominantColors(inputColors, 0);
    expect(result).toHaveLength(8);
    expect(result).toContain('hsla(9, 100%, 64%, 1)');
    expect(result).toContain('hsla(180, 100%, 97%, 1)');
    expect(result).toContain('hsla(351, 100%, 86%, 1)');
    expect(result).toContain('hsla(0, 0%, 100%, 1)');
    expect(result).toContain('hsla(0, 0%, 0%, 1)');
    expect(result).toContain('hsla(39, 77%, 83%, 1)');
    expect(result).toContain('hsla(0, 0%, 0%, 0)');
    expect(result).toContain('hsla(186, 89%, 29%, 1)');
  });
});
